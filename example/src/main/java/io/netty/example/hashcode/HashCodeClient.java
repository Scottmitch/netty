/*
 * Copyright 2015 The Netty Project
 *
 * The Netty Project licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
package io.netty.example.hashcode;

import io.netty.bootstrap.Bootstrap;
import io.netty.channel.Channel;
import io.netty.channel.ChannelFuture;
import io.netty.channel.ChannelInitializer;
import io.netty.channel.ChannelOption;
import io.netty.channel.ChannelPipeline;
import io.netty.channel.EventLoopGroup;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.SocketChannel;
import io.netty.channel.socket.nio.NioSocketChannel;
import io.netty.handler.ssl.SslContext;
import io.netty.handler.ssl.SslContextBuilder;
import io.netty.handler.ssl.util.InsecureTrustManagerFactory;
import io.netty.util.collection.IntObjectHashMap;
import io.netty.util.collection.IntObjectMap;

import java.util.ArrayList;
import java.util.List;

/**
 * Issue requests in parallel to compute the hash code value for randomly generated byte arrays.
 * The server will do all the work, of generating byte arrays, computing the hashes with multiple algorithms
 * and report back the number of hash collisions.
 */
public class HashCodeClient {
    static final boolean SSL = System.getProperty("ssl") != null;
    static final String HOST = System.getProperty("host", "127.0.0.1");
    static final int PORT = Integer.parseInt(System.getProperty("port", "8017"));
    static final int MAX_SAMPLES_PER_LENGTH = Integer.parseInt(System.getProperty("max_samples", "1000"));
    static final int MIN_ARRAY_LENGTH = Integer.parseInt(System.getProperty("min_length", "5"));
    static final int MAX_ARRAY_LENGTH = Integer.parseInt(System.getProperty("min_length", "200"));
    private static final int ARRAY_LEGTHS = MAX_ARRAY_LENGTH - MIN_ARRAY_LENGTH;
    private static final int MAX_CONNECTIONS = Math.min(256, ARRAY_LEGTHS);
    private static final int REQUESTS_PER_CONNECTION = ARRAY_LEGTHS / MAX_CONNECTIONS;
    private static final int PER_BYTE_PERMUTATIONS = 256;

    public static void main(String[] args) throws Exception {
        // Configure SSL.git
        final SslContext sslCtx;
        if (SSL) {
            sslCtx = SslContextBuilder.forClient()
                .trustManager(InsecureTrustManagerFactory.INSTANCE).build();
        } else {
            sslCtx = null;
        }

        // Configure the client.
        EventLoopGroup group = new NioEventLoopGroup(2);
        try {
            Bootstrap b = new Bootstrap();
            b.group(group)
             .channel(NioSocketChannel.class)
             .option(ChannelOption.TCP_NODELAY, true)
             .handler(new ChannelInitializer<SocketChannel>() {
                 @Override
                 public void initChannel(SocketChannel ch) throws Exception {
                     ChannelPipeline p = ch.pipeline();
                     if (sslCtx != null) {
                         p.addLast(sslCtx.newHandler(ch.alloc(), HOST, PORT));
                     }
                     //p.addLast(new LoggingHandler(LogLevel.INFO));
                     p.addLast(new HashCodeRequestEncoder());
                     p.addLast(new HashCodeResultDecoder());
                     p.addLast(new HashCodeClientHandler());
                 }
             });

            // Issue all requests over multiple connections
            System.out.println("array length,num samples,generator id,number collision instances, " +
                    "min collision count,max collision count,mid-point collision count");
            List<Channel> channels = new ArrayList<Channel>(MAX_CONNECTIONS);
            for (int i = 0; i < MAX_CONNECTIONS; ++i) {
                ChannelFuture f = b.connect(HOST, PORT).sync();
                Channel channel = f.channel();
                final int start = i * REQUESTS_PER_CONNECTION + MIN_ARRAY_LENGTH;
                final int end = start + REQUESTS_PER_CONNECTION;
                IntObjectMap<HashCodeRequest> requestMap = new IntObjectHashMap<HashCodeRequest>(end - start);
                channel.pipeline().get(HashCodeClientHandler.class).requestMap(requestMap);
                for (int j = start; j < end; ++j) {
                    HashCodeRequest request = new HashCodeRequest(j, j,
                            (int) Math.min(Math.pow(2, j) * PER_BYTE_PERMUTATIONS, MAX_SAMPLES_PER_LENGTH));
                    requestMap.put(request.id(), request);
                    channel.writeAndFlush(request);
                }
                channels.add(channel);
            }

            // Wait until the connection is closed.
            for (Channel channel : channels) {
                channel.closeFuture().sync();
            }
        } finally {
            // Shut down the event loop to terminate all threads.
            group.shutdownGracefully();
        }
    }
}
